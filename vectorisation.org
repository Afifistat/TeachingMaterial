#+LaTeX_CLASS: beamer
#+MACRO: BEAMERMODE presentation

#+BEAMER_FRAME_LEVEL: 2

# Turn on org-beamer-mode; 
#+STARTUP: beamer

#+LATEX_HEADER: \newcommand{\Slang}{\texttt{S} }
#+LATEX_HEADER: \newcommand{\R}{\texttt{R} }
#+LATEX_HEADER: \newcommand{\Rfunction}[1]{{\texttt{#1}}}
#+LATEX_HEADER: \newcommand{\Robject}[1]{{\texttt{#1}}}
#+LATEX_HEADER: \newcommand{\Rpackage}[1]{{\mbox{\normalfont\textsf{#1}}}}

## http://lists.gnu.org/archive/html/emacs-orgmode/2009-11/msg01129.html
#+latex: \newcommand{\BC}{\begin{columns}[t]}
#+latex: \newcommand{\EC}{\end{columns}}

#+BEGIN_LaTeX
\makeatletter
\def\DIfF^#1{%
  \mathop{\mathrm{\mathstrut \text{d}}}%
  \nolimits^{#1}\gobblespace}
\makeatother

%% fragwidth will measure the width of the text, and then we use
%% it for the width of the textblock.
\newdimen{\fragwidth}

\newcommand{\mybottomleft}[1]{
\settowidth{\fragwidth}{#1}
\begin{textblock*}{\fragwidth}[0,0](2mm,90mm)  %% {width}(horiz, vert)
  #1
\end{textblock*}
}

\newcommand{\mybottomright}[1]{
\settowidth{\fragwidth}{#1}
\begin{textblock*}{\fragwidth}[1,0](126mm,90mm)  %% {width}(horiz, vert)
  #1
\end{textblock*}
}

\newcommand{\deriv}[3][]{% \deriv[<order>]{<func>}{<var>}
  \ensuremath{\frac{\partial^{#1} {#2}}{\partial {#3}^{#1}}}}
#+END_LaTeX

#+LATEX_HEADER: \usepackage[overlay,absolute]{textpos}
# SJE: should not need to specify beamertheme, if taking default.
# +MACRO: BEAMERTHEME default
# +MACRO: BEAMERCOLORTHEME lily
# +MACRO: BEAMERSUBJECT R Programming
# +MACRO: BEAMERINSTITUTE University of Cambridge

# Some of my own macros.  hash at the start of the line is my
# comment.  Macros get written as {{{macro(arg1,arg2)}}}
# Would be nice if all the emacs hackery could be specified within
# this file, rather than having to edit the .emacs file too.

#+LATEX_HEADER: \definecolor{Red}{rgb}{0.7,0,0}
#+LATEX_HEADER: \definecolor{Blue}{rgb}{0,0,0.8}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{%
#+LATEX_HEADER:   pdfusetitle,
#+LATEX_HEADER:   bookmarks = {true},
#+LATEX_HEADER:   bookmarksnumbered = {true},
#+LATEX_HEADER:   bookmarksopen = {true},
#+LATEX_HEADER:   bookmarksopenlevel = 2,
#+LATEX_HEADER:   unicode = {true},
#+LATEX_HEADER:   breaklinks = {false},
#+LATEX_HEADER:   hyperindex = {true},
#+LATEX_HEADER:   colorlinks = {true},
#+LATEX_HEADER:   linktocpage = {true},
#+LATEX_HEADER:   plainpages = {false},
#+LATEX_HEADER:   linkcolor = {Blue},
#+LATEX_HEADER:   citecolor = {Blue},
#+LATEX_HEADER:   urlcolor = {Red},
#+LATEX_HEADER:   pdfstartview = {Fit},
#+LATEX_HEADER:   pdfpagemode = {UseOutlines},
#+LATEX_HEADER:   pdfview = {XYZ null null null}
#+LATEX_HEADER: }

#+LATEX_HEADER: \AtBeginSection{\begin{frame} \frametitle{Outline} \tableofcontents[currentsection] \end{frame}}
#+LATEX_HEADER:   \setbeamersize{text margin left=0.25cm}
#+LATEX_HEADER:   \setbeamersize{text margin right=0.25cm}
#+LATEX_HEADER:  \setbeamertemplate{navigation symbols}{}
#+LATEX_HEADER:  \usepackage{listings}
# what do these other options do? apart from toc?
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t

#+MACRO: ALERT \alert{$1}
#+MACRO: FIGURE \begin{centering}\includegraphics[$2]{$1}\par \end{centering} 
#+TITLE: Vectorisation in =R=
#+AUTHOR: L. Gatto

* Introduction

** Vectorisation

A *vectorised computation* is one that, when applied to a vector (of length greater than 1),
automatically operates directly on all elements of the input vector.

#+begin_src R :results session *R* output :exports both
  (x <- 1:5)
  (y <- 5:1)
  x + y  
#+end_src

"Many operations in R are vectorized, and understanding and 
using vectorization is an essential component of becoming a proficient
programmer." R Gentleman in /R Programming for Bioinformatics/

** Recycling rule

What is =x= and =y= are of different length: 
the shorter vector is replicate so that its length matches the longer ones.

#+begin_src R :results output :exports both
  (x <- 1:6)
  (y <- 1:2)
  x+y  
#+end_src

If the shorter vector is not an even multiple of the longer, a warning is issued.


** With matrices (1)

Matrices must be conformable. 

\BC
#+latex: \column{0.5\textwidth}
#+begin_src R :results output :session *R* :exports both
  m <- matrix(1:9, 3)
  m
#+end_src

#+latex: \column{0.5\textwidth}
#+begin_src R :results output :session *R* :exports both
  n <- matrix(9:1, 3)
  n
#+end_src
\EC


** With matrices (2)

\BC
#+latex: \column{0.5\textwidth}
#+begin_src R :results output :session *R* :exports both
  m * n
#+end_src

#+latex: \column{0.5\textwidth}
#+begin_src R :results output :session *R* :exports both
  m %*%n 
#+end_src
\EC


** =diff= example (1)
Compute difference between times of events, =e=. Given =n= events, there will
be =n-1= inter-event times. =interval[i] <- e[i+1] - e[i]=

\bigskip

Procedural implementation:
#+begin_src R :results output :session *R* :exports both
    diff1 <- function(e) {
      n <- length(e)
      interval <- rep(0, n - 1) 
      for (i in 1:(n - 1)) {
        interval[i] <- 
          e[i + 1] - e[i]
      }
      interval
    }
    e <- c(2, 5, 10.2, 12, 19)
    diff1(e)  
#+end_src

** =diff= example (2)

Vectorised implementation
#+begin_src R :results output :session *R* :exports both
  diff2 <- function(e) {
    n <- length(e)
    e[-1] - e[-n]
  }  
  e <- c(2, 5, 10.2, 12, 19)
  diff2(e)  
#+end_src

#+begin_src R :results output :session *R* :exports both
  all.equal(diff1(e), diff2(e))    
#+end_src


## ** Writing vectorised functions


* Iterations

** When using =for= loops

Initialising the result variable before iteration to avoid unnecessary copies at each iteration substantially increases performance.

#+begin_src R :results output :session *R* :exports both
  n <- 5e3
  f1 <- function(n) {
    a <- NULL; for (i in 1:n) a <- c(a, sqrt(i)); a }
  f2 <- function(n) {
    a <- numeric(n); for (i in 1:n) a[i] <- sqrt(i); a }
  system.time(f1(n))
  system.time(f2(n))
#+end_src

** =*apply= functions

How to apply a function, iteratively, on a set of elements?

\bigskip

=apply(X, MARGIN, FUN, ...)=
- =MARGIN= = 1 for row, 2 for cols.
- =FUN= = function to apply
- =...= = extra args to function.
- =simplify= =  should the result be simplified if possible.

\bigskip

=*apply= functions are (generally) *NOT* faster than loops, but more succint and thus clearer.


** Usage (1)

#+begin_src R 
  v <- rnorm(1000) ## or a list
  res <- numeric(length(v))
  
  for (i in 1:length(v)) 
    res[i] <- f(v[i])
  
  res <- sapply(v, f)
  
  ## if f is vectorised
  f(v) 
#+end_src
   
** Usage (2)

#+begin_src R 
  ## M is a matrix/data.frame/array
  rowResults <- numeric(nrow(M))
  colResults <- numeric(ncol(M))
  
  for (i in 1:nrow(M)) 
    rowResults <- f(M[i, ])
  
  for (j in 1:ncol(M)) 
    colResults <- f(M[, j])
  
  rowResults <- apply(M, 1, f)
  colResults <- apply(M, 2, f)
  
#+end_src


** =*apply= functions
|---------+-------------------------------------------|
| apply   | matrices, arrays, data.frames             |
| lapply  | lists, vectors                            |
| sapply  | lists, vectors                            |
| vapply  | with a pre-specified type of return value |
| tapply  | atomic objects, typically vectors         |
| by      | similar to tapply                         |
| eapply  | environments                              |
| mapply  | multiple values                           |
| rapply  | recursive version of lapply               |
| esApply | =ExpressionSet=, defined in =Biobase=     |
|---------+-------------------------------------------|

See also the =BiocGenerics= package for =[l|m|s|t]apply= S4 generics,
as well as parallel versions in the =parallel= package.

\bigskip

See also the =plyr= package, that offers its own flavour of *apply* functions.

** Other functions 
- =replicate= -- repeated evaluation of an expression
- =aggregate= -- compute summary statistics of data subsets
- =ave= -- group averages over level combinations of factors
- =sweep= -- sweep out array summaries


** Anonymous functions

A function defined/called without being assigned to an 
identifier and generally passed as argument to other functions 
(and in particular =apply= functions).

#+begin_src R :results output 
  M <- matrix(rnorm(100), 10)
  apply(M, 1, function(Mrow) 'do something with Mrow')
  apply(M, 2, function(Mcol) 'do something with Mcol')  
#+end_src


** Example - extract (1)

Extracting the $i^{th}$ column of elements in a list:
#+begin_src R :results output :session *R* :exports both
  A <- matrix(1:4, 2)
  B <- matrix(1:6, 2)
  L <- list(A, B)
  sapply(L, function(x) x[,2])
#+end_src

** Example - extract (2)

Extracting the $i^{th}$ column of elements in a list:
#+begin_src R :results output :session *R* :exports both
  A <- matrix(1:4, 2)
  B <- matrix(1:6, 2)
  L <- list(A, B)
  lapply(L, "[", , 2) 
#+end_src

(See =help("[")= if the syntax is unexpected.)


** Example - replicate

#+begin_src R :results output :session *R* :exports both 
  f <- function(d) {
    M <- matrix(runif(d^2), nrow=d)
    solve(M)
  }
  system.time(f(100))
  (res <- replicate(10, system.time(f(100))[["elapsed"]]))
#+end_src

#+begin_src R :results output :session *R* :exports both 
  summary(res)
#+end_src


** Example - integration (1)

#+header: :height 5
#+begin_src R :session *R* :results graphics :file fig-integrate.pdf :exports results
  f <- function(x, a = 1) sin(x^2)/ (a + abs(x))
  x <- seq(-7, 7, 0.02 )
  x0 <- seq(-2, 2, 0.02)
  y0 <- f(x0)
  y0[y0 < 0] <- 0
  plot(x, f(x), type = "l", main = expression(f(x) ==  frac(sin(x^2),(a + abs(x)))))
  grid()
  abline(v = c(-2, 2), lty = "dotted")
  polygon(x0, y0, col = "#00000010")
#+end_src

** Example - integration (2)

The =integrate= function approximates definite integrals by adaptive quadrature.

#+begin_src R :results output :session *R* :exports both
  f <- function(x, a = 1) sin(x^2)/ (a + abs(x))
  integrate(f, lower = -2, upper = 2)
#+end_src

It is not vectorised.

#+begin_src R :results output :session *R* :exports both
  lo <- c(-2, 0)
  hi <- c(0, 2)
  integrate(f, lower = lo, upper = hi)  
#+end_src

** Example - integration (3)
To vectorise a function, we can explicitly wrap it inside a helper function 
that will take care of argument recycling (via =rep=), then loop over 
the inputs and call the non-vectorised function.

** Example - integration (4)
To vectorise a function, we can explicitate the vectorised calculation using =mapply= 

#+begin_src R :results output :session *R* :exports both
  mapply(function(lo, hi) integrate(f, lo, hi)$value,
         lo, hi)
#+end_src

** Example - integration (5)

Create a vectorised form using =Vectorize=. 
It takes a function (here, an anonymous function) as input and returns a function.

#+begin_src R :results output :session *R* :exports both
  Integrate <- Vectorize(
    function(fn, lower, upper)
    integrate(fn, lower, upper)$value,
    vectorize.args=c("lower", "upper")
    )
  Integrate(f, lower=lo, upper=hi)
#+end_src



** Example - *tapply*

#+begin_src R :results output :session *R* :exports both
  dfr <- data.frame(A = sample(letters[1:5], 100,
                      replace = TRUE), 
                    B = rnorm(100))
  tapply(dfr$B, dfr$A, mean)
#+end_src

#+begin_src R :results output :session *R* :exports both
  tapply(dfr$B, dfr$A, summary)[1:2]
#+end_src


** Efficient apply-like functions

- In =base=: rowSums, rowMeans, colSums, colMeans
- In =Biobase=: rowQ, rowMax, rowMin, rowMedias, ...
- In =genefilter=: rowttests, rowFtests, rowSds, rowVars, ...

\bigskip

Generalisable on other data structures, like =ExpressionSet= instances. 



** Timings (1)

#+begin_src R :results output :session *R* :exports both
  f1 <- function(n) {
    a <- NULL 
    for (i in 1:n) a <- c(a, sqrt(i))
    a
  }
  f2 <- function(n) {
    a <- numeric(n)
    for (i in 1:n) a[i] <- sqrt(i)
    a
  }
  
  f3 <- function(n)
    sapply(seq_len(n), sqrt)
    
  f4 <- function(n) sqrt(n)
#+end_src

#+begin_src R :results output :session *R* :exports none 
  n <- 10^(2:5)   
  t1 <- sapply(n, function(.n) system.time(f1(.n))[["elapsed"]])
  t2 <- sapply(n, function(.n) system.time(f2(.n))[["elapsed"]])
  t3 <- sapply(n, function(.n) system.time(f3(.n))[["elapsed"]])
  t4 <- sapply(n, function(.n) system.time(f4(.n))[["elapsed"]])
  
  elapsed <- data.frame(t1, t2, t3, t4)
  rownames(elapsed) <- n
  
  colnames(elapsed) <-
    c("for loop\nwithout init",
      "for loop\nwith init",
      "wrapped in\napply",
      "built-in sqrt\n(vectorised)")
#+end_src

** Timings (1)

#+header: :height 5
#+begin_src R :results graphics :session *R* :file fig-timings-1.pdf :exports results 
  library(grid)
  library(reshape2)
  library(scales)
  library(ggplot2)
  mainvp <- viewport(width = 1,
                     height = 1,
                     x = 0.5, y = 0.5)
  subvp <- viewport(width = 6/9,
                    height = 5/9,
                    x = .1,
                    y = .95,
                    just = c("left","top"))
  df <- melt(elapsed)
  colnames(df) <- c("Implementation", "Elapsed")
  df$Iterations <- rep(n, 4)
  ymax <- max(elapsed[, -1])
  p <- ggplot(data=df, aes(x=Iterations, y=Elapsed, col=Implementation)) +
    geom_line() + geom_point() +
    theme(legend.position="bottom") +
    scale_x_continuous(trans=log10_trans()) + 
    coord_trans(x="log2")
  q <- p + coord_cartesian(ylim=c(0, (ymax+.05))) +
    theme_gray(8) +
    labs(x = NULL, y = NULL) +
    theme(plot.margin = unit(rep(0.3, 4), "lines")) +
    theme(legend.position="none")
  print(p, vp = mainvp)
  print(q, vp = subvp)
#+end_src

** Timings (2)

#+begin_src R :results output :session *R* :exports both  
  f1 <- function(M) {
    res <- numeric(nrow(M))
    for (i in 1:nrow(M))
      res[i] <- sum(M[i, ])
    res
  }
  
  f2 <- function(M)
    apply(M, 1, sum)
  
  f3 <- function(M)
    rowSums(M)
#+end_src

#+begin_src R :results none :session *R* :exports none 
  n <- 100
  M <- matrix(rnorm(1e4), ncol = 10)  
  
  t1 <- replicate(n, system.time(f1(M))[["elapsed"]])
  t2 <- replicate(n, system.time(f2(M))[["elapsed"]])
  t3 <- replicate(n, system.time(f3(M))[["elapsed"]])
  
  elapsed <- data.frame(t1, t2, t3)
  
  colnames(elapsed) <-
    c("for loop\nwith init",
      "wrapped in\napply",
      "rowSums")
#+end_src

** Timings (2)

#+header: :height 5
#+begin_src R :results graphics :session *R* :file fig-timings-2.pdf :exports results 
  df <- melt(elapsed)
  colnames(df) <- c("Implementation", "Elapsed")
  p <- ggplot(data=df, aes(x=Implementation, y=Elapsed)) +
    geom_boxplot() +
    ggtitle(paste0("replicate(", n, ", system.time(f(M))[['elapsed']])"))  
  print(p)
#+end_src

** Parallelisation

Vectorised operations are natural candidats for parallel execution. \\
See later, /Parallel computation/ topic.


* References
** References
- R Gentleman, /R Programming for Bioinformatics/, CRC Press, 2008
- Ligges and Fox, /R Help Desk, How Can I Avoid This Loop or Make It Faster?/ *R News*, Vol 8/1. May 2008.
- R Grouping functions: sapply vs. lapply vs. apply. vs. tapply vs. by vs. aggregate ... http://stackoverflow.com/questions/3505701/

