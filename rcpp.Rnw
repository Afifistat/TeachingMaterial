\begin{frame}
  \begin{block}{The \Rpackage{Rcpp} package}
    \begin{itemize}
    \item Dirk Eddelbuettel and Romain Francois, with contributions by Douglas Bates, John Chambers and JJ Allaire
    \item \R functions as well as a C++ library which facilitate the integration of \R and C++
    \item \url{http://www.rcpp.org/}
    \end{itemize}    
  \end{block}
  \pause
  \begin{block}{Associated packages}
    \begin{itemize}
    \item \Rpackage{RcppArmadillo} -- Armadillo templated C++ library for linear algebra. 
    \item \Rpackage{RcppEigen} -- high-performance Eigen linear algebra library.
    \item \Rpackage{RInside} -- use \R from inside another C++ by wrapping the existing \R embedding API 
      in an easy-to-use C++ class.
    \end{itemize}    
  \end{block}
\end{frame}


\begin{frame}[fragile]{Using C/C++ code with Rcpp}
  \begin{block}{Rcpp package}
    \Rpackage{Rcpp} is a great package for writing both C and C++ code:
    \begin{itemize}
    	\item It comes with loads of documentation and examples. 
    	\item All basic \R types are implemented as C++ classes.
    	\item No need to worry about garbage collection. 
    	\item With package \code{inline} code can be easily compiled in \R
    \end{itemize}
  \end{block}
  
\begin{scriptsize}
<<inline-example,echo=TRUE>>=
library(Rcpp)
library(inline)
cppCode <- '
    Rcpp::NumericVector cx(x);
    Rcpp::NumericVector ret(1);
    ret[0] = cx[0] * cx[0];
    return(ret);
    '
squareOne <- cxxfunction(signature(x="numeric"), 
                      plugin="Rcpp", body=cppCode)
squareOne(10)
@
\end{scriptsize}
\end{frame}

\begin{frame}[fragile]{\code{gccount2} example with \code{Rcpp}}
  \begin{example}
    \tiny
\begin{verbatim}
#include <Rcpp.h>

using namespace Rcpp;

RcppExport SEXP gccount2(SEXP inseq){
  Rcpp::CharacterVector dnaseq(inseq);
  Rcpp::NumericVector ans(4);
  std::string s = Rcpp::as<std::string>(dnaseq);

  for (int i = 0; i < 4; i++) 
    ans[i] = 0;

  for (int i = 0; i < s.size(); i++) {
    char p = s[i];
    if (p=='A') 
      ans[0]++;
    else if (p=='C') 
      ans[1]++;
    else if (p=='G') 
      ans[2]++;
    else if (p=='T') 
      ans[3]++;
    else 
      Rf_error("Wrong alphabet");
  }
  
  return(ans);
}
\end{verbatim}
  \end{example}
\end{frame}

\begin{frame}{Using Rcpp in a package}
  \begin{block}{Using in a package}
    \begin{enumerate}
      \item You will need a \texttt{Makevars} file in the \code{src} directory
      \item Modify \texttt{DESCRIPTION} file: \\
      	\code{Depends: Rcpp} \\
      	\code{LinkingTo: Rcpp}
      \item Create an \R~function that uses it: \texttt{gccount2 <- function(inseq) .Call("gccount2",inseq)}
      \item In \texttt{NAMESPACE} file export the shared objects with \texttt{useDynLib}.
    \end{enumerate}
  \end{block}
  \begin{example}
	See package \texttt{sequences} for a working example.
  \end{example}
\end{frame}
