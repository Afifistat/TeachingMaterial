<<recache, echo=FALSE, message = FALSE>>=
library("sequences")
x <- "ACCGGGTTTT"
@ 

\section{The \texttt{Rcpp} package}

\begin{frame}
  \begin{block}{The \Rpackage{Rcpp} package}
    \begin{itemize}
    \item Dirk Eddelbuettel and Romain Francois, with contributions by Douglas Bates, John Chambers and JJ Allaire
    \item \R functions as well as a \Cpp library which facilitate the integration of \R and \Cpp
    \item Also very well suited for \C
    \item \url{http://www.rcpp.org/}
    \end{itemize}    
  \end{block}
  \pause
  \begin{block}{Associated packages}
    \begin{itemize}
    \item \Rpackage{RcppArmadillo} -- Armadillo templated \Cpp library for linear algebra. 
    \item \Rpackage{RcppEigen} -- high-performance Eigen linear algebra library.
    \item \Rpackage{RInside} -- use \R from inside another \Cpp by wrapping the existing \R embedding API 
      in an easy-to-use \Cpp class.
    \end{itemize}    
  \end{block}
\end{frame}


\begin{frame}[fragile]
  \begin{block}{}
    \Rpackage{Rcpp} is a great package for writing both \C and \Cpp code:
    \begin{itemize}
    	\item It comes with \textbf{loads} of documentation and examples. 
    	\item All basic \R types are implemented as \Cpp classes.
    	\item No need to worry about garbage collection. 
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}
  \begin{block}{Types}    
    \begin{center}
      \begin{tabular}{lll}
        \texttt{Scalar} & \texttt{Vector}          & \texttt{Matrix}          \\ \hline
        \texttt{double} & \texttt{NumericVector}   & \texttt{NumericMatrix}   \\
        \texttt{int}    & \texttt{IntegerVector}   & \texttt{IntegerMatrix}   \\
        \texttt{string} & \texttt{CharacterVector} & \texttt{CharacterMatrix} \\
        \texttt{bool}   & \texttt{LogicalVector}   & \texttt{LogicalMatrix}   \\
      \end{tabular}
    \end{center}
    Anf \texttt{Function}, \texttt{List}, \texttt{DataFrame} \ldots
  \end{block}  
\end{frame}

\begin{frame}
  \begin{block}{Standard template library}    
  \end{block}
\end{frame}

\begin{frame}
  \begin{block}{}
    \begin{enumerate}
    \item \Rfunction{ingccount2}: embedding the \Cpp directly in \R 
      using the \Rfunction{Rcpp::cppFunction} package. 
      (Note there is also \Rfunction{inline::cxxfunction}).
    \item \Rfunction{gccount2}: in a package, writing the \Cpp into its own code file and using \Rfunction{.Call}.
    \item \Rfunction{gccountX}: using \Rfunction{sourceCpp} to source the \Cpp file and export the function to \R.
    \end{enumerate}
  \end{block}
\end{frame}

\begin{frame}
  \begin{block}{}
    \begin{itemize}
    %% \item \Rfunction{sourceCpp} to source a \Cpp code and export it as an \R function, 
    %%   while exposing code in \Cpp directly to \R using modules 
    %%   (see the \href{http://dirk.eddelbuettel.com/code/rcpp/Rcpp-modules.pdf}{Rcpp-modules} vignette).
    \item \Rfunction{sugar}: expression templates that allow compact vectorised expression just 
      like in \R but at compiled speed 
      (see the \href{http://dirk.eddelbuettel.com/code/rcpp/Rcpp-sugar.pdf}{Rcpp-sugar} vignette).
    \item Using S4 Reference Classes to reflect \Cpp classes and methods 
      (see the \href{http://dirk.eddelbuettel.com/code/rcpp/Rcpp-modules.pdf}{Rcpp-modules} vignette).
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}{\url{./src/ingccount2.R}}
  \tiny
  \verbatiminput{src/ingccount2.R}
\end{frame}


\begin{frame}[fragile]
<<ingccount2>>=
x <- "ACCGGGTTTT"
source("src/ingccount2.R")
ingccount2(x)
@   
\end{frame}


\begin{frame}{\url{./src/ingccount2.R}}
  \tiny
  \verbatiminput{src/gccount2.cpp}
\end{frame}


\begin{frame}[fragile]
  \begin{block}{In a package}
    \begin{enumerate}
      \item You will need a \texttt{Makevars} file in the \code{src} directory
      \item Modify \texttt{DESCRIPTION} file: \\
      	\code{Depends: Rcpp} \\
      	\code{LinkingTo: Rcpp}
      \item Create an \R function that uses it
<<gccount2r, tidy = FALSE, eval = FALSE>>=
gccount2 <- function(inseq) 
  .Call("gccount2", inseq, PACKAGE = "mypackage")
@         
      \item Document the \R function
      \item Export the \R function and \texttt{useDynLib(mypackge)} in the \texttt{NAMESPACE}
    \end{enumerate}
  \end{block}
	See package \texttt{sequences} for a working example.
\end{frame}


\begin{frame}[fragile]
  \begin{block}{Using \Rfunction{sourceCpp}}    
    \begin{itemize}
    \item Write the \Cpp code into a \texttt{cpp} file, including headers and dedicated export statement (see next slide).
    \item Source it and use the \R function.
<<sourcercpp>>=
sourceCpp("src/gccountX.cpp")
gccountX(x)
@       
    \end{itemize}
  \end{block}
\end{frame}


\begin{frame}{\url{./src/gccountX.R}}
  \tiny
  \verbatiminput{src/gccountX.cpp}
\end{frame}


\subsection{The pi example}
\begin{frame}
  \begin{block}{Modules and sugar}
    The pi example
  \end{block}
\end{frame}

\subsection{Rcpp classes}

\begin{frame}
  \begin{block}{Boost}    
  \end{block}
\end{frame}

\subsection{Rcpp in packages}

\begin{frame}[fragile]
<<cpppack, eval = FALSE>>=
Rcpp.package.skeleton("NewPackage")
Rcpp.package.skeleton("NewPackage", attribute = TRUE)
Rcpp.package.skeleton("NewPackage", module = TRUE)
Rcpp.package.skeleton("NewPackage", cpp_files = c("convolve.cpp"))
@   
\end{frame}


